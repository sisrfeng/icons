!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/wf/.local/share/nvim/PL/icons/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
Acknowledgments	README.md	/^Acknowledgments$/;"	s
Any background context you can provide?	.github/PULL_REQUEST_TEMPLATE.md	/^#### Any background context you can provide?$/;"	t
Contributing	README.md	/^Contributing$/;"	s
Developers	README.md	/^Developers$/;"	s
Features	README.md	/^Features$/;"	s
File_Icon	plugin/icon_wf.vim	/^    fun! File_Icon(...) abort$/;"	f
Filter	rplugin/python3/denite/filter/devicons_denite_converter.py	/^class Filter(Base):$/;"	c
How should this be manually tested?	.github/PULL_REQUEST_TEMPLATE.md	/^#### How should this be manually tested?$/;"	t
Icons_GetFileFormatSymbol	plugin/icon_wf.vim	/^    fun! Icons_GetFileFormatSymbol(...)$/;"	f
Icons_NERDTreeChangeRootHandler	nerdtree_plugin/webdevicons.vim	/^fun! Icons_NERDTreeChangeRootHandler(node)$/;"	f
Icons_NERDTreeDirClose	nerdtree_plugin/webdevicons.vim	/^fun! Icons_NERDTreeDirClose(node)$/;"	f
Icons_NERDTreeDirCloseChildren	nerdtree_plugin/webdevicons.vim	/^fun! Icons_NERDTreeDirCloseChildren(node)$/;"	f
Icons_NERDTreeDirCloseRecursively	nerdtree_plugin/webdevicons.vim	/^fun! Icons_NERDTreeDirCloseRecursively(node)$/;"	f
Icons_NERDTreeDirOpen	nerdtree_plugin/webdevicons.vim	/^fun! Icons_NERDTreeDirOpen(node)$/;"	f
Icons_NERDTreeDirOpenRecursively	nerdtree_plugin/webdevicons.vim	/^fun! Icons_NERDTreeDirOpenRecursively(node)$/;"	f
Icons_NERDTreeDirUpdateFlags	nerdtree_plugin/webdevicons.vim	/^fun! Icons_NERDTreeDirUpdateFlags(node, glyph)$/;"	f
Icons_NERDTreeMapActivateNode	nerdtree_plugin/webdevicons.vim	/^fun! Icons_NERDTreeMapActivateNode(node)$/;"	f
Icons_NERDTreeMapActivateNodeSingleMode	nerdtree_plugin/webdevicons.vim	/^fun! Icons_NERDTreeMapActivateNodeSingleMode(node)$/;"	f
Icons_NERDTreeMapCloseChildren	nerdtree_plugin/webdevicons.vim	/^fun! Icons_NERDTreeMapCloseChildren(node)$/;"	f
Icons_NERDTreeMapCloseDir	nerdtree_plugin/webdevicons.vim	/^fun! Icons_NERDTreeMapCloseDir(node)$/;"	f
Icons_NERDTreeMapOpenRecursively	nerdtree_plugin/webdevicons.vim	/^fun! Icons_NERDTreeMapOpenRecursively(node)$/;"	f
Icons_NERDTreeMapUpdirKeepOpen	nerdtree_plugin/webdevicons.vim	/^fun! Icons_NERDTreeMapUpdirKeepOpen()$/;"	f
Icons_NERDTreeUpDirCurrentRootClosedHandler	nerdtree_plugin/webdevicons.vim	/^fun! Icons_NERDTreeUpDirCurrentRootClosedHandler()$/;"	f
Installation	README.md	/^Installation$/;"	s
License	README.md	/^License$/;"	s
NERDTreeIcons_RefreshListener	plugin/icon_wf.vim	/^        fun! NERDTreeIcons_RefreshListener(event)$/;"	f
Optional Info	.github/ISSUE_TEMPLATE.md	/^#### Optional Info$/;"	t
Promotion	README.md	/^### Promotion$/;"	S	section:Contributing
Required Info	.github/ISSUE_TEMPLATE.md	/^#### Required Info$/;"	t
Requirements	.github/ISSUE_TEMPLATE.md	/^#### Requirements$/;"	t
Requirements (please check off with 'x')	.github/PULL_REQUEST_TEMPLATE.md	/^#### Requirements (please check off with 'x')$/;"	t
Screenshots (if appropriate or helpful)	.github/PULL_REQUEST_TEMPLATE.md	/^#### Screenshots (if appropriate or helpful)$/;"	t
Troubleshooting	README.md	/^Troubleshooting$/;"	s
What are the relevant tickets (if any)?	.github/PULL_REQUEST_TEMPLATE.md	/^#### What are the relevant tickets (if any)?$/;"	t
What does this Pull Request (PR) do?	.github/PULL_REQUEST_TEMPLATE.md	/^#### What does this Pull Request (PR) do?$/;"	t
[Code of Conduct](CODE_OF_CONDUCT.md)	README.md	/^### [Code of Conduct](CODE_OF_CONDUCT.md)$/;"	S	section:Contributing
[Contributing Guide](CONTRIBUTING.md)	README.md	/^### [Contributing Guide](CONTRIBUTING.md)$/;"	S	section:Contributing
__init__	rplugin/python3/denite/filter/devicons_denite_converter.py	/^	def __init__(self, vim):$/;"	m	class:Filter
devicons#plugins#denite#init	autoload/devicons/plugins/denite.vim	/^function! devicons#plugins#denite#init() abort$/;"	f
devicons#plugins#startify#init	autoload/devicons/plugins/startify.vim	/^function! devicons#plugins#startify#init() abort$/;"	f
filter	rplugin/python3/denite/filter/devicons_denite_converter.py	/^	def filter(self, context):$/;"	m	class:Filter
g:Icons__NERDTreeRedraw	nerdtree_plugin/webdevicons.vim	/^        let g:Icons__NERDTreeRedraw = 0$/;"	v
g:Icons__NERDTreeRedraw	nerdtree_plugin/webdevicons.vim	/^        let g:Icons__NERDTreeRedraw = 1$/;"	v
g:Icons_utf_DecorateFileNodesExactSymbols	plugin/icon_wf.vim	/^                let g:Icons_utf_DecorateFileNodesExactSymbols = {}$/;"	v
g:Icons_utf_DecorateFileNodesExactSymbols	plugin/icon_wf.vim	/^                let g:Icons_utf_DecorateFileNodesExactSymbols[key] = val$/;"	v
g:Icons_utf_DecorateFileNodesExtensionSymbols	plugin/icon_wf.vim	/^                    let g:Icons_utf_DecorateFileNodesExtensionSymbols[key] = val$/;"	v
g:Icons_utf_DecorateFileNodesExtensionSymbols	plugin/icon_wf.vim	/^                let g:Icons_utf_DecorateFileNodesExtensionSymbols = {}$/;"	v
g:Icons_utf_DecorateFileNodesPatternSymbols	plugin/icon_wf.vim	/^                    let g:Icons_utf_DecorateFileNodesPatternSymbols[key] = val$/;"	v
g:Icons_utf_DecorateFileNodesPatternSymbols	plugin/icon_wf.vim	/^                let g:Icons_utf_DecorateFileNodesPatternSymbols = {}$/;"	v
g:icon_wf_enable_nerdtree	nerdtree_plugin/webdevicons.vim	/^         let g:icon_wf_enable_nerdtree = 0$/;"	v
g:icon_wf_gui_glyph_fix	nerdtree_plugin/webdevicons.vim	/^        let g:icon_wf_gui_glyph_fix = 0$/;"	v
g:icon_wf_gui_glyph_fix	nerdtree_plugin/webdevicons.vim	/^        let g:icon_wf_gui_glyph_fix = 1$/;"	v
icon_wf	pythonx/vim_devicons/powerline/segments.py	/^def icon_wf(pl, segment_info):$/;"	f
icon_wf#hardRefresh	plugin/icon_wf.vim	/^    fun! icon_wf#hardRefresh()$/;"	f
icon_wf#refresh	plugin/icon_wf.vim	/^    fun! icon_wf#refresh()$/;"	f
icon_wf#softRefresh	plugin/icon_wf.vim	/^    fun! icon_wf#softRefresh()$/;"	f
icon_wf_conceal_nerdtree_brackets	plugin/icon_wf.vim	/^        augroup icon_wf_conceal_nerdtree_brackets$/;"	a
icon_wf_cursor_hold	plugin/icon_wf.vim	/^                augroup icon_wf_cursor_hold$/;"	a
icon_wf_file_format	pythonx/vim_devicons/powerline/segments.py	/^def icon_wf_file_format(pl, segment_info):$/;"	f
s:CursorHoldUpdate	plugin/icon_wf.vim	/^            fun! s:CursorHoldUpdate()$/;"	f
s:Icons__GetArtifactFix	plugin/icon_wf.vim	/^    fun! s:Icons__GetArtifactFix()$/;"	f
s:Refresh	nerdtree_plugin/webdevicons.vim	/^fun! s:Refresh()$/;"	f
s:SetupListeners	nerdtree_plugin/webdevicons.vim	/^fun! s:SetupListeners()$/;"	f
s:getDistro	plugin/icon_wf.vim	/^    function s:getDistro()$/;"	f
s:hardRefreshNerdTree	plugin/icon_wf.vim	/^        fun! s:hardRefreshNerdTree()$/;"	f
s:initialize	plugin/icon_wf.vim	/^        fun! s:initialize()$/;"	f
s:isDarwin	plugin/icon_wf.vim	/^    function s:isDarwin()$/;"	f
s:save_cpo	plugin/icon_wf.vim	/^let s:save_cpo = &cpo  | set cpo&vim$/;"	v
s:set	plugin/icon_wf.vim	/^    fun! s:set(var, default) abort$/;"	f
s:setCursorHold	plugin/icon_wf.vim	/^            fun! s:setCursorHold()$/;"	f
s:setDictionaries	plugin/icon_wf.vim	/^    fun! s:setDictionaries()$/;"	f
s:setSyntax	plugin/icon_wf.vim	/^    fun! s:setSyntax()$/;"	f
s:softRefreshNerdTree	plugin/icon_wf.vim	/^        fun! s:softRefreshNerdTree()$/;"	f
s:strip	plugin/icon_wf.vim	/^    fun! s:strip(input)$/;"	f
vim	pythonx/vim_devicons/powerline/segments.py	/^	vim = {}$/;"	v
wf_home	rplugin/python3/denite/filter/devicons_denite_converter.py	/^    import os       ; wf_home = os.path.expanduser("~\/")$/;"	v
