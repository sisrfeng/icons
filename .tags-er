!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/wf/.local/share/nvim/PL/icons_vimL/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
Acknowledgments	README.md	/^Acknowledgments$/;"	s
AirlineWebDevIcons	plugin/webdevicons.vim	/^        fun! AirlineWebDevIcons(...)$/;"	f
Any background context you can provide?	.github/PULL_REQUEST_TEMPLATE.md	/^#### Any background context you can provide?$/;"	t
Contributing	README.md	/^Contributing$/;"	s
Developers	README.md	/^Developers$/;"	s
Features	README.md	/^Features$/;"	s
Filter	rplugin/python3/denite/filter/devicons_denite_converter.py	/^class Filter(Base):$/;"	c
How should this be manually tested?	.github/PULL_REQUEST_TEMPLATE.md	/^#### How should this be manually tested?$/;"	t
Installation	README.md	/^Installation$/;"	s
License	README.md	/^License$/;"	s
NERDTreeWebDevIconsRefreshListener	plugin/webdevicons.vim	/^        fun! NERDTreeWebDevIconsRefreshListener(event)$/;"	f
Optional Info	.github/ISSUE_TEMPLATE.md	/^#### Optional Info$/;"	t
Promotion	README.md	/^### Promotion$/;"	S	section:Contributing
Required Info	.github/ISSUE_TEMPLATE.md	/^#### Required Info$/;"	t
Requirements	.github/ISSUE_TEMPLATE.md	/^#### Requirements$/;"	t
Requirements (please check off with 'x')	.github/PULL_REQUEST_TEMPLATE.md	/^#### Requirements (please check off with 'x')$/;"	t
Screenshots (if appropriate or helpful)	.github/PULL_REQUEST_TEMPLATE.md	/^#### Screenshots (if appropriate or helpful)$/;"	t
Troubleshooting	README.md	/^Troubleshooting$/;"	s
WebDevIconsGetFileFormatSymbol	plugin/webdevicons.vim	/^    fun! WebDevIconsGetFileFormatSymbol(...)$/;"	f
WebDevIconsGetFileTypeSymbol	plugin/webdevicons.vim	/^    fun! WebDevIconsGetFileTypeSymbol(...) abort$/;"	f
WebDevIconsNERDTreeChangeRootHandler	nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeChangeRootHandler(node)$/;"	f
WebDevIconsNERDTreeDirClose	nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeDirClose(node)$/;"	f
WebDevIconsNERDTreeDirCloseChildren	nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeDirCloseChildren(node)$/;"	f
WebDevIconsNERDTreeDirCloseRecursively	nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeDirCloseRecursively(node)$/;"	f
WebDevIconsNERDTreeDirOpen	nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeDirOpen(node)$/;"	f
WebDevIconsNERDTreeDirOpenRecursively	nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeDirOpenRecursively(node)$/;"	f
WebDevIconsNERDTreeDirUpdateFlags	nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeDirUpdateFlags(node, glyph)$/;"	f
WebDevIconsNERDTreeMapActivateNode	nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeMapActivateNode(node)$/;"	f
WebDevIconsNERDTreeMapActivateNodeSingleMode	nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeMapActivateNodeSingleMode(node)$/;"	f
WebDevIconsNERDTreeMapCloseChildren	nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeMapCloseChildren(node)$/;"	f
WebDevIconsNERDTreeMapCloseDir	nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeMapCloseDir(node)$/;"	f
WebDevIconsNERDTreeMapOpenRecursively	nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeMapOpenRecursively(node)$/;"	f
WebDevIconsNERDTreeMapUpdirKeepOpen	nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeMapUpdirKeepOpen()$/;"	f
WebDevIconsNERDTreeUpDirCurrentRootClosedHandler	nerdtree_plugin/webdevicons.vim	/^function! WebDevIconsNERDTreeUpDirCurrentRootClosedHandler()$/;"	f
What are the relevant tickets (if any)?	.github/PULL_REQUEST_TEMPLATE.md	/^#### What are the relevant tickets (if any)?$/;"	t
What does this Pull Request (PR) do?	.github/PULL_REQUEST_TEMPLATE.md	/^#### What does this Pull Request (PR) do?$/;"	t
[Code of Conduct](CODE_OF_CONDUCT.md)	README.md	/^### [Code of Conduct](CODE_OF_CONDUCT.md)$/;"	S	section:Contributing
[Contributing Guide](CONTRIBUTING.md)	README.md	/^### [Contributing Guide](CONTRIBUTING.md)$/;"	S	section:Contributing
__init__	rplugin/python3/denite/filter/devicons_denite_converter.py	/^	def __init__(self, vim):$/;"	m	class:Filter
airline#extensions#tabline#formatters#webdevicons#format	autoload/airline/extensions/tabline/formatters/webdevicons.vim	/^function! airline#extensions#tabline#formatters#webdevicons#format(bufnr, buffers) abort$/;"	f
devicons#plugins#ctrlp#init	autoload/devicons/plugins/ctrlp.vim	/^function! devicons#plugins#ctrlp#init() abort$/;"	f
devicons#plugins#denite#init	autoload/devicons/plugins/denite.vim	/^function! devicons#plugins#denite#init() abort$/;"	f
devicons#plugins#flagship#init	autoload/devicons/plugins/flagship.vim	/^function! devicons#plugins#flagship#init() abort$/;"	f
devicons#plugins#startify#init	autoload/devicons/plugins/startify.vim	/^function! devicons#plugins#startify#init() abort$/;"	f
devicons#plugins#unite#init	autoload/devicons/plugins/unite.vim	/^function! devicons#plugins#unite#init() abort$/;"	f
devicons#plugins#vimfiler#init	autoload/devicons/plugins/vimfiler.vim	/^function! devicons#plugins#vimfiler#init() abort$/;"	f
filter	rplugin/python3/denite/filter/devicons_denite_converter.py	/^	def filter(self, context):$/;"	m	class:Filter
g:DevIconsEnableFolderExtensionPatternMatching	nerdtree_plugin/webdevicons.vim	/^  let g:DevIconsEnableFolderExtensionPatternMatching = 0$/;"	v
g:DevIconsEnableFolderPatternMatching	nerdtree_plugin/webdevicons.vim	/^  let g:DevIconsEnableFolderPatternMatching = 1$/;"	v
g:DevIconsEnableFoldersOpenClose	nerdtree_plugin/webdevicons.vim	/^  let g:DevIconsEnableFoldersOpenClose = 0$/;"	v
g:DevIconsEnableNERDTreeRedraw	nerdtree_plugin/webdevicons.vim	/^    let g:DevIconsEnableNERDTreeRedraw = 0$/;"	v
g:DevIconsEnableNERDTreeRedraw	nerdtree_plugin/webdevicons.vim	/^    let g:DevIconsEnableNERDTreeRedraw = 1$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExactSymbols	plugin/webdevicons.vim	/^                let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols = {}$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExactSymbols	plugin/webdevicons.vim	/^                let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	plugin/webdevicons.vim	/^                    let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols	plugin/webdevicons.vim	/^                let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	plugin/webdevicons.vim	/^                    let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols[key] = val$/;"	v
g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols	plugin/webdevicons.vim	/^                let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {}$/;"	v
g:_webdevicons_airline_orig_formatter	plugin/webdevicons.vim	/^            let g:_webdevicons_airline_orig_formatter = get(g:, 'airline#extensions#tabline#form/;"	v
g:airline#extensions#tabline#formatter	plugin/webdevicons.vim	/^            let g:airline#extensions#tabline#formatter = 'webdevicons'$/;"	v
g:ctrlp_formatline_func	autoload/devicons/plugins/ctrlp.vim	/^        let g:ctrlp_formatline_func = 's:formatline(s:curtype() == "buf" ? v:val : WebDevIconsGe/;"	v
g:loaded_webdevicons	plugin/webdevicons.vim	/^    let g:loaded_webdevicons = 1$/;"	v
g:webdevicons_enable	nerdtree_plugin/webdevicons.vim	/^  let g:webdevicons_enable = 1$/;"	v
g:webdevicons_enable_airline_statusline	nerdtree_plugin/webdevicons.vim	/^  let g:webdevicons_enable_airline_statusline = 1$/;"	v
g:webdevicons_enable_airline_tabline	nerdtree_plugin/webdevicons.vim	/^  let g:webdevicons_enable_airline_tabline = 1$/;"	v
g:webdevicons_enable_nerdtree	nerdtree_plugin/webdevicons.vim	/^     let g:webdevicons_enable_nerdtree = 0$/;"	v
g:webdevicons_enable_nerdtree	nerdtree_plugin/webdevicons.vim	/^  let g:webdevicons_enable_nerdtree = 1$/;"	v
g:webdevicons_gui_glyph_fix	nerdtree_plugin/webdevicons.vim	/^    let g:webdevicons_gui_glyph_fix = 0$/;"	v
g:webdevicons_gui_glyph_fix	nerdtree_plugin/webdevicons.vim	/^    let g:webdevicons_gui_glyph_fix = 1$/;"	v
icon_wf	pythonx/vim_devicons/powerline/segments.py	/^def icon_wf(pl, segment_info):$/;"	f
icon_wf_file_format	pythonx/vim_devicons/powerline/segments.py	/^def icon_wf_file_format(pl, segment_info):$/;"	f
s:CursorHoldUpdate	plugin/webdevicons.vim	/^            fun! s:CursorHoldUpdate()$/;"	f
s:DevIconsGetArtifactFix	plugin/webdevicons.vim	/^    fun! s:DevIconsGetArtifactFix()$/;"	f
s:Refresh	nerdtree_plugin/webdevicons.vim	/^function! s:Refresh()$/;"	f
s:SetupListeners	nerdtree_plugin/webdevicons.vim	/^function! s:SetupListeners()$/;"	f
s:column	autoload/vimfiler/columns/devicons.vim	/^let s:column = {$/;"	v
s:column.define_syntax	autoload/vimfiler/columns/devicons.vim	/^function! s:column.define_syntax(context) abort "{{{$/;"	f
s:column.get	autoload/vimfiler/columns/devicons.vim	/^function! s:column.get(file, context) abort$/;"	f
s:column.length	autoload/vimfiler/columns/devicons.vim	/^function! s:column.length(files, context) abort$/;"	f
s:filters.filter	autoload/devicons/plugins/unite.vim	/^  function! s:filters.filter(candidates, context) abort$/;"	f
s:getDistro	plugin/webdevicons.vim	/^    function s:getDistro()$/;"	f
s:hardRefreshNerdTree	plugin/webdevicons.vim	/^        fun! s:hardRefreshNerdTree()$/;"	f
s:initialize	plugin/webdevicons.vim	/^        fun! s:initialize()$/;"	f
s:isDarwin	plugin/webdevicons.vim	/^    function s:isDarwin()$/;"	f
s:plugin_home	plugin/webdevicons.vim	/^let s:plugin_home = expand('<sfile>:p:h:h')$/;"	v
s:save_cpo	autoload/vimfiler/columns/devicons.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugin/webdevicons.vim	/^    let s:save_cpo = &cpo  | set cpo&vim$/;"	v
s:set	plugin/webdevicons.vim	/^    fun! s:set(var, default) abort$/;"	f
s:setCursorHold	plugin/webdevicons.vim	/^            fun! s:setCursorHold()$/;"	f
s:setDictionaries	plugin/webdevicons.vim	/^    fun! s:setDictionaries()$/;"	f
s:setSyntax	plugin/webdevicons.vim	/^    fun! s:setSyntax()$/;"	f
s:softRefreshNerdTree	plugin/webdevicons.vim	/^        fun! s:softRefreshNerdTree()$/;"	f
s:strip	plugin/webdevicons.vim	/^    fun! s:strip(input)$/;"	f
s:version	plugin/webdevicons.vim	/^let s:version = '0.11.0'$/;"	v
vim	pythonx/vim_devicons/powerline/segments.py	/^	vim = {}$/;"	v
vimfiler#columns#devicons#define	autoload/vimfiler/columns/devicons.vim	/^function! vimfiler#columns#devicons#define() abort$/;"	f
webdevicons#hardRefresh	plugin/webdevicons.vim	/^    fun! webdevicons#hardRefresh()$/;"	f
webdevicons#pluginHome	plugin/webdevicons.vim	/^    fun! webdevicons#pluginHome()$/;"	f
webdevicons#refresh	plugin/webdevicons.vim	/^    fun! webdevicons#refresh()$/;"	f
webdevicons#softRefresh	plugin/webdevicons.vim	/^    fun! webdevicons#softRefresh()$/;"	f
webdevicons#version	plugin/webdevicons.vim	/^    fun! webdevicons#version()$/;"	f
webdevicons_conceal_nerdtree_brackets	plugin/webdevicons.vim	/^        augroup webdevicons_conceal_nerdtree_brackets$/;"	a
webdevicons_cursor_hold	plugin/webdevicons.vim	/^                augroup webdevicons_cursor_hold$/;"	a
webdevicons_flagship_filesymbol	autoload/devicons/plugins/flagship.vim	/^    augroup webdevicons_flagship_filesymbol$/;"	a
webdevicons_flagship_filetype	autoload/devicons/plugins/flagship.vim	/^    augroup webdevicons_flagship_filetype$/;"	a
wf_home	pythonx/vim_devicons/powerline/segments.py	/^    import os       ; wf_home = os.path.expanduser("~\/")$/;"	v
